# SPDX-License-Identifier: Apache-2.0
---

- name: Download - SAP Software Files - Get files with Python venv
  community.sap_launchpad.software_center_download:
    suser_id: "{{ sap_software_download_suser_id }}"
    suser_password: "{{ sap_software_download_suser_password }}"
    search_query: "{{ item }}"
    dest: "{{ sap_software_download_directory }}"
    search_alternatives: "{{ sap_software_download_find_alternatives | d(true) }}"
    deduplicate: "{{ sap_software_download_deduplicate | d('') }}"
    validate_checksum: "{{ sap_software_download_validate_checksum | d(false) }}"
  # Loop condition acts as when conditional
  loop: "{{ sap_software_download_files if sap_software_download_use_venv | d(true) else [] }}"
  loop_control:
    label: "{{ item }} : {{ __sap_software_download_files_results_venv.msg | d('') }}"
  register: __sap_software_download_files_results_venv
  environment:
    PATH: "{{ __sap_software_download_venv.path }}/bin:{{ ansible_env.PATH }}"
    PYTHONPATH: "{{ __sap_software_download_venv.path }}/lib/{{ sap_software_download_python_interpreter }}/site-packages"
    VIRTUAL_ENV: "{{ __sap_software_download_venv.path }}"
  vars:
    ansible_python_interpreter: "{{ __sap_software_download_venv.path ~ '/bin/' ~ sap_software_download_python_interpreter }}"
  ignore_errors: true  # Errors are ignored and validated afterwards


- name: Download - SAP Software Files - Get files with Python system default
  community.sap_launchpad.software_center_download:
    suser_id: "{{ sap_software_download_suser_id }}"
    suser_password: "{{ sap_software_download_suser_password }}"
    search_query: "{{ item }}"
    dest: "{{ sap_software_download_directory }}"
    search_alternatives: "{{ sap_software_download_find_alternatives | d(true) }}"
    deduplicate: "{{ sap_software_download_deduplicate | d('') }}"
    validate_checksum: "{{ sap_software_download_validate_checksum | d(false) }}"
  # Loop condition acts as when conditional
  loop: "{{ sap_software_download_files if not sap_software_download_use_venv | d(true) else [] }}"
  loop_control:
    label: "{{ item }} : {{ __sap_software_download_files_results_default.msg | d('') }}"
  register: __sap_software_download_files_results_default
  vars:
    ansible_python_interpreter: "{{ '/usr/bin/' ~ sap_software_download_python_interpreter }}"
  ignore_errors: true  # Errors are ignored and validated afterwards


- name: Download - SAP Software Files - Set fact with software_center_download output
  ansible.builtin.set_fact:
    __sap_software_download_files_results: "{{ __sap_software_download_files_results_venv
      if sap_software_download_use_venv | d(true) else __sap_software_download_files_results_default }}"

- name: Download - SAP Software Files - Show failed results
  ansible.builtin.fail:
    msg: |
      Download failed for following files: {{ __failed_items | map(attribute='item') | list | join(', ') }}
      Either set `sap_software_download_find_alternatives` to `true` to search for alternative files
      or ignore this error with `sap_software_download_ignore_file_not_found` set to `true`.
  vars:
    __failed_items: "{{ __sap_software_download_files_results.results
      | selectattr('failed', 'defined') | selectattr('failed', 'true') }}"
  when:
    - not sap_software_download_ignore_file_not_found | d(false)
    - __failed_items | length > 0
